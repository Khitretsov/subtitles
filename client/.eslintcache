[{"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\index.js":"3","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Join\\index.js":"4","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Chat\\index.js":"5","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Dictophone\\index.js":"6","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Dictophone\\styles.js":"7","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Chat\\styles.js":"8"},{"size":160,"mtime":1612253649710,"results":"9","hashOfConfig":"10"},{"size":325,"mtime":1612254611993,"results":"11","hashOfConfig":"10"},{"size":137,"mtime":1615883956299,"results":"12","hashOfConfig":"10"},{"size":1187,"mtime":1612260056149,"results":"13","hashOfConfig":"10"},{"size":5825,"mtime":1619645228377,"results":"14","hashOfConfig":"10"},{"size":3672,"mtime":1619087036578,"results":"15","hashOfConfig":"10"},{"size":227,"mtime":1618842324698,"results":"16","hashOfConfig":"10"},{"size":300,"mtime":1618843514787,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ks36gb",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\index.js",[],["37","38"],"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\App.js",["39"],"import react from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route\r\n} from 'react-router-dom'\r\n\r\nimport { Join, Chat } from './components'\r\n\r\nconst App = () => (\r\n    <Router>\r\n        <Route path=\"/\" exact component={Join} />\r\n        <Route path=\"/chat\" component={Chat} />\r\n    </Router>\r\n)\r\n\r\nexport default App","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\index.js",[],"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Join\\index.js",[],"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Chat\\index.js",["40"],"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Dictophone\\index.js",["41"],"import React, { useEffect, useState } from 'react';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nimport * as styles from './styles'\r\n\r\nconst Dictaphone = ({\r\n    sendSubtitles,\r\n    isDictaphoneDisabled,\r\n    setDictaphoneDisableting,\r\n    socket,\r\n    collectText,\r\n    setCurrentUserSpeach\r\n}) => {\r\n\r\n    const [saveText, setSaveText] = useState([])\r\n    const [language, setLanguage] = useState('ru')\r\n\r\n    const [isRestartStreamNeeded, setStreamRestarting] = useState(false)\r\n\r\n    const {\r\n        transcript,\r\n        // interimTranscript,\r\n        finalTranscript,\r\n        resetTranscript,\r\n        listening,\r\n    } = useSpeechRecognition()\r\n\r\n    useEffect(\r\n        () => {\r\n            if (finalTranscript !== '') {\r\n                sendSubtitles(finalTranscript, true)\r\n                setSaveText([...saveText, finalTranscript])\r\n                resetTranscript()\r\n            }\r\n            return () => {\r\n                SpeechRecognition.stopListening()\r\n            }\r\n        },\r\n        [ finalTranscript ]\r\n        // [interimTranscript, finalTranscript]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!socket.current) return\r\n        if (transcript !== finalTranscript) {\r\n            sendSubtitles(transcript, false)\r\n        }\r\n\r\n    })\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        console.log('Your browser does not support speech recognition software! Try Chrome desktop, maybe?');\r\n    }\r\n\r\n    const listenContinuously = () => {\r\n        socket.current.emit('i_start_speak')\r\n        SpeechRecognition.startListening({\r\n            continuous: true,\r\n            language: language,\r\n        });\r\n    };\r\n\r\n    if (isRestartStreamNeeded) {\r\n        listenContinuously()\r\n    }\r\n\r\n    if (finalTranscript) {\r\n        collectText(finalTranscript)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentUserSpeach(transcript)\r\n    })\r\n\r\n\r\n    return (\r\n        <div style={styles.dictophone}>\r\n            <div>\r\n                <span>\r\n                listening:\r\n                {' '}\r\n                {listening ? 'on' : 'off'}\r\n                </span>\r\n                <div>\r\n                    <select disabled={isDictaphoneDisabled} value={language} onChange={e => {\r\n                        setLanguage(e.target.value)\r\n                    }}>\r\n                        <option value=\"ru\">ru</option>\r\n                        <option value=\"en-US\">en-US</option>\r\n                    </select>\r\n\r\n                    <button {...{\r\n                        type: 'button',\r\n                        onClick: () => {\r\n                            setDictaphoneDisableting(!isDictaphoneDisabled)\r\n                            setStreamRestarting(true)\r\n                            listenContinuously()\r\n                        },\r\n                        disabled: isDictaphoneDisabled,\r\n                    }}>     Listen    </button>\r\n\r\n                    <button {...{\r\n                        type: 'button',\r\n                        onClick: () => {\r\n                            setDictaphoneDisableting(!isDictaphoneDisabled)\r\n                            socket.current.emit('i_end_speak')\r\n                            SpeechRecognition.stopListening()\r\n                            setStreamRestarting(false)\r\n                        },\r\n                        disabled: !(listening && isDictaphoneDisabled),\r\n                    }}>    Stop    </button>\r\n                </div>\r\n            </div>\r\n            {/* <div>\r\n                Ваша речь: <span>{transcript}</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dictaphone;","C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Dictophone\\styles.js",[],"C:\\Users\\Admin\\Desktop\\webSockets\\client\\src\\components\\Chat\\styles.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":79,"column":8,"nodeType":"52","endLine":79,"endColumn":25,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":39,"column":9,"nodeType":"52","endLine":39,"endColumn":28,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'collectText', 'history', 'name', and 'room'. Either include them or remove the dependency array.","ArrayExpression",["58"],"React Hook useEffect has missing dependencies: 'resetTranscript', 'saveText', and 'sendSubtitles'. Either include them or remove the dependency array. If 'sendSubtitles' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [collectText, history, location.search, name, room]",{"range":"64","text":"65"},"Update the dependencies array to be: [finalTranscript, resetTranscript, saveText, sendSubtitles]",{"range":"66","text":"67"},[2560,2577],"[collectText, history, location.search, name, room]",[1053,1072],"[finalTranscript, resetTranscript, saveText, sendSubtitles]"]